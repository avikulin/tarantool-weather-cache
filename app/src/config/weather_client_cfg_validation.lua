---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by andreyv.
--- DateTime: 20.03.2024 14:21
---
local utils = require('app.src.utils.validation_utils')
local weather_provider_metadata = require('app.src.config.open_weather_client_metadata')
local log = require('log').new("weather_client_cfg_validation")
local json = require('json')
log.cfg{ level='info'}

local function validate_config(config)
    if (config == nil) then
        log.error("Passes config object is empty")
        return false
    end

    -- собираем имена параметров
    local uri_cfg_key = weather_provider_metadata.get_uri_cfg_key()
    local x_coord_cfg_key = weather_provider_metadata.get_longitude_cfg_key()
    local y_coord_cfg_key = weather_provider_metadata.get_latitude_cfg_key()
    local actuality_opts_cfg_key = weather_provider_metadata.get_actuality_opts_cfg_key()
    local query_opts_cfg_key = weather_provider_metadata.get_query_opts_cfg_key()

    -- получаем параметры конфигурации
    local param_uri = config[uri_cfg_key]
    local param_x_coord = config[x_coord_cfg_key]
    local param_y_coord = config[y_coord_cfg_key]
    local param_actuality_opts = config[actuality_opts_cfg_key]
    local param_query_opts = config[query_opts_cfg_key]

    log.info("Parsed <weather-provider> configuration data: "
    ..uri_cfg_key.." = "..param_uri..", "
    ..x_coord_cfg_key.." = "..param_x_coord..", "
    ..y_coord_cfg_key.." = "..param_y_coord..", "
    ..actuality_opts_cfg_key.." = "..json.encode(param_actuality_opts)..", "
    ..query_opts_cfg_key.." = "..json.encode(param_query_opts))

    -- валидируем параметры конфигурации
    local err_msg = "Cluster global configuration error at <weather-provider> section"
    if (
        not utils.validate_string_value(uri_cfg_key, param_uri, err_msg) or
        not utils.validate_string_value(x_coord_cfg_key, param_x_coord, err_msg) or
        not utils.validate_string_value(y_coord_cfg_key, param_y_coord, err_msg) or
        not utils.validate_array_value(actuality_opts_cfg_key, param_actuality_opts, err_msg) or
        not utils.validate_array_value(query_opts_cfg_key, param_query_opts, err_msg)
    ) then
        return false
    end

    return true
end

return {validate_config = validate_config}
